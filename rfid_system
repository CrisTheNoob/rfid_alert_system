#include <WiFi.h>
#include <HTTPClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <map>

#define PUL_PIN 25
#define DIR_PIN 26
#define ENA_PIN 27
#define RST_PIN 34   // Reset pin for RFID
#define SS_PIN 5     // Slave Select pin for RFID
#define BUZZER_PIN 12 // Buzzer connected to GPIO 12

const char* ssid = "Consistency_2.4GHz";  // Wi-Fi SSID
const char* password = "triplecris";  // Wi-Fi password
const char* serverUrl = "https://sl-attendancesystem.site/save_rfid.php"; // Server URL

MFRC522 rfid(SS_PIN, RST_PIN);
LiquidCrystal_I2C lcd(0x27, 16, 2);
bool motorPositionSet = false;

#define SIM900_TX_PIN 17  // Use TX2 for SIM900A
#define SIM900_RX_PIN 16  // Use RX2 for SIM900A

HardwareSerial sim900Serial(2);  // Use Serial2 for SIM900A communication
std::map<String, bool> studentStatus;  // Track student status (inside/outside)
bool cardScanned = false; // Prevent duplicate scans

void setup() {
  Serial.begin(9600);
  SPI.begin();
  rfid.PCD_Init();

  pinMode(PUL_PIN, OUTPUT);
  pinMode(DIR_PIN, OUTPUT);
  pinMode(ENA_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  digitalWrite(ENA_PIN, LOW); // Enable the motor
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");

  Serial.println("Moving motor to start position...");
  rotateMotorToPosition(11500);  // Move to starting position

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi!");

  motorPositionSet = true;
  Serial.println("Ready to scan RFID.");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Scan your ID");

  sim900Serial.begin(9600, SERIAL_8N1, SIM900_RX_PIN, SIM900_TX_PIN);
  delay(2000);
  initializeSIM900A();
}

void loop() {
  if (motorPositionSet && !cardScanned) {
    if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
      delay(500); // Prevent double reads

      String uid = "";
      for (byte i = 0; i < rfid.uid.size; i++) {
        uid += String(rfid.uid.uidByte[i], HEX);
        if (i < rfid.uid.size - 1) uid += ":";
      }
      uid.toUpperCase();

      Serial.println("Scanned UID: " + uid);
      buzz(100); // Beep when scanning an RFID card

      bool isInside = studentStatus[uid];  // Get previous status
      sendUIDToServer(uid, !isInside);  // Toggle the status

      // Stop processing the same card multiple times
      rfid.PICC_HaltA();
      rfid.PCD_StopCrypto1();

      delay(3000);  // Prevent multiple detections
      cardScanned = false; // Reset flag after delay
    }
  }
}

void rotateMotorToPosition(int steps) {
  digitalWrite(DIR_PIN, steps > 0 ? HIGH : LOW);
  steps = abs(steps);

  for (int i = 0; i < steps; i++) {
    digitalWrite(PUL_PIN, HIGH);
    delayMicroseconds(50);
    digitalWrite(PUL_PIN, LOW);
    delayMicroseconds(50);
  }

  Serial.print("Motor moved by ");
  Serial.print(steps);
  Serial.println(" steps.");
}

// Extract value from JSON response
String getJsonValue(String response, String key) {
  String value = "";
  int startIdx = response.indexOf("\"" + key + "\":\"");
  if (startIdx != -1) {
    startIdx += key.length() + 4;
    int endIdx = response.indexOf("\"", startIdx);
    if (endIdx != -1) {
      value = response.substring(startIdx, endIdx);
    }
  }
  return value;
}

// Send UID to the server
void sendUIDToServer(String uid, bool entering) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    String jsonPayload = "{\"uid\":\"" + uid + "\"}";
    Serial.println("Sending JSON: " + jsonPayload);

    int httpResponseCode = http.POST(jsonPayload);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Server Response: " + response);

      String fullname = getJsonValue(response, "fullname");
      String guardianContact = getJsonValue(response, "guardian_contact_number");

      Serial.println("Extracted Fullname: " + fullname);
      Serial.println("Extracted Guardian Contact: " + guardianContact);

      lcd.clear();
      if (fullname != "") { 
        lcd.setCursor(0, 0);
        lcd.print(fullname);

        if (entering) {
          lcd.setCursor(0, 1);
          lcd.print("Entering School");
          studentStatus[uid] = true;
        } else {
          lcd.setCursor(0, 1);
          lcd.print("Leaving School");
          studentStatus[uid] = false;
        }

        // **Move motor first before sending SMS**
        rotateMotorToPosition(-11500);
        delay(5000);
        rotateMotorToPosition(11500);

        // **Now send SMS after motor movement**
        if (guardianContact != "") {
          sendSMS(guardianContact, fullname + (entering ? " is inside the school premises." : " has left the school premises."));
        }

      } else {
        lcd.setCursor(0, 0);
        lcd.print("Not Enrolled!");
        buzz(1000); // **Alert when student is not found**
      }
    } else {
      Serial.println("Error sending data: " + String(httpResponseCode));
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Server Error");
    }

    delay(2000);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Scan your ID");

    http.end();
  } else {
    Serial.println("Wi-Fi not connected");
  }
}

void initializeSIM900A() {
  sim900Serial.println("AT");
  delay(1000);
  sim900Serial.println("AT+CSQ");
  delay(1000);
  sim900Serial.println("AT+CREG?");
  delay(1000);
  sim900Serial.println("AT+CMGF=1");
  delay(1000);
}

void sendSMS(String phoneNumber, String message) {
  int attemptCount = 3;
  while (attemptCount > 0) {
    sim900Serial.print("AT+CMGS=\"");
    sim900Serial.print(phoneNumber);
    sim900Serial.println("\"");
    delay(1000);

    sim900Serial.println(message);
    delay(1000);

    sim900Serial.write(26);
    delay(3000);

    if (sim900Serial.available()) {
      String response = sim900Serial.readString();
      if (response.indexOf("+CMGS:") >= 0) {
        Serial.println("SMS Sent to: " + phoneNumber);
        buzz(200); // Beep when SMS is sent
        return;
      }
    }

    attemptCount--;
    Serial.println("Retrying SMS... Attempts left: " + String(attemptCount));
  }

  Serial.println("Failed to send SMS after multiple attempts");
}

void buzz(int duration) {
  digitalWrite(BUZZER_PIN, HIGH);
  delay(duration);
  digitalWrite(BUZZER_PIN, LOW);
}
